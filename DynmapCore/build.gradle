description = "DynmapCore"

dependencies {
    compile project(path: ':DynmapCoreAPI', configuration: 'shadow')
    compile 'javax.servlet:javax.servlet-api:3.1'
    compile 'org.eclipse.jetty:jetty-server:9.4.24.v20191120'
    compile 'org.eclipse.jetty:jetty-servlet:9.4.24.v20191120'
    compile 'com.googlecode.json-simple:json-simple:1.1.1'
    compile 'org.yaml:snakeyaml:1.23'
    compile 'com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20180219.1'
    implementation 'org.jetbrains:annotations:15.0'
    compile 'com.zaxxer:HikariCP:3.4.2'
}

processResources {
    // replace stuff in mcmod.info, nothing else
	from('src/main/resources') {
	    include 'core.yml'
	    include 'lightings.txt'
	    include 'perspectives.txt'
	    include 'shaders.txt'
		include 'extracted/web/version.js'
		include 'extracted/web/index.html'
		include 'extracted/web/login.html'
        // replace version and mcversion
        expand(
                buildnumber: project.parent.ext.globals.buildNumber,
                version: project.version
        )
    }
}

jar {
   classifier = 'unshaded'
}

shadowJar {
    dependencies {
        include(dependency('com.googlecode.json-simple:json-simple:'))
        include(dependency('org.yaml:snakeyaml:'))
        include(dependency('com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:'))
        include(dependency('javax.servlet::'))
        include(dependency('org.eclipse.jetty::'))
        include(dependency('org.eclipse.jetty.orbit:javax.servlet:'))
        include(dependency(':DynmapCoreAPI'))
        include(dependency('org.jetbrains:annotations:15.0'))
        include(dependency('com.zaxxer:HikariCP:2.4.13'))
	}
	relocate('org.json.simple', 'org.dynmap.json.simple')
	relocate('org.yaml.snakeyaml', 'org.dynmap.snakeyaml')
	relocate('org.eclipse.jetty', 'org.dynmap.jetty')
	relocate('org.owasp.html', 'org.dynmap.org.owasp.html')
	relocate('javax.servlet', 'org.dynmap.javax.servlet' )
    relocate('com.zaxxer.hikari', 'org.dynmap.hikari')
    destinationDir = file '../target'
    classifier = ''
}

artifacts {
    archives shadowJar as Object
}
